/*
 * Lichess.org API reference
 *
 * # Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login and gameplay: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - API UI app with OAuth2 login and endpoint forms: [source](https://github.com/lichess-org/api-ui) / [website](https://lichess.org/api/ui) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles) - [Download all evaluated positions](https://database.lichess.org/#evals)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/lichess-org/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/lichess-bot-devs/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot) - [JavaScript & TypeScript general API](https://github.com/devjiwonchoi/equine)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.  ## Authentication ### Which authentication method is right for me? [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md)  ### Personal Access Token Personal API access tokens allow you to quickly interact with Lichess API without going through an OAuth flow. - [Generate a personal access token](https://lichess.org/account/oauth/token) - `curl https://lichess.org/api/account -H \"Authorization: Bearer {token}\"` - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)  ### Authorization Code Flow with PKCE The authorization code flow with PKCE allows your users to **login with Lichess**. Lichess supports unregistered and public clients (no client authentication, choose any unique client id). The only accepted code challenge method is `S256`. Access tokens are long-lived (expect one year), unless they are revoked. Refresh tokens are not supported.  See the [documentation for the OAuth endpoints](#tag/OAuth) or the [PKCE RFC](https://datatracker.ietf.org/doc/html/rfc7636#section-4) for a precise protocol description.  - [Demo app](https://lichess-org.github.io/api-demo/) - [Minimal client-side example](https://github.com/lichess-org/api/tree/master/example/oauth-app) - [Flask/Python example](https://github.com/lakinwecker/lichess-oauth-flask) - [Java example](https://github.com/tors42/lichess-oauth-pkce-app) - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)  #### Real life examples - [PyChess](https://github.com/gbtami/pychess-variants) ([source code](https://github.com/gbtami/pychess-variants)) - [Lichess4545](https://www.lichess4545.com/) ([source code](https://github.com/cyanfish/heltour)) - [English Chess Federation](https://ecf.octoknight.com/) - [Rotherham Online Chess](https://rotherhamonlinechess.azurewebsites.net/tournaments)  ### Token format Access tokens and authorization codes match `^[A-Za-z0-9_]+$`. The length of tokens can be increased without notice. Make sure your application can handle at least 512 characters. By convention tokens have a recognizable prefix, but do not rely on this. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@lichess.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`api_swiss_join`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSwissJoinError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_swiss_new`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSwissNewError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_swiss_schedule_next_round`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSwissScheduleNextRoundError {
    Status400(crate::models::Error),
    Status401(crate::models::SwissUnauthorisedEdit),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_swiss_terminate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSwissTerminateError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_swiss_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSwissUpdateError {
    Status400(crate::models::Error),
    Status401(crate::models::SwissUnauthorisedEdit),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_swiss_withdraw`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSwissWithdrawError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_team_swiss`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTeamSwissError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`games_by_swiss`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesBySwissError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`results_by_swiss`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResultsBySwissError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`swiss`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SwissError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`swiss_trf`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SwissTrfError {
    UnknownValue(serde_json::Value),
}


/// Join a Swiss tournament, possibly with a password. 
pub async fn api_swiss_join(configuration: &configuration::Configuration, id: &str, password: Option<&str>) -> Result<crate::models::Ok, Error<ApiSwissJoinError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/join", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = password {
        local_var_form_params.insert("password", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSwissJoinError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a Swiss tournament for your team.  This endpoint mirrors the Swiss tournament form from your team pagee.  You can create up to 12 tournaments per day.  Additional restrictions:   - clock.limit + clock.increment > 0   - 15s and 0+1 variant tournaments cannot be rated 
pub async fn api_swiss_new(configuration: &configuration::Configuration, team_id: &str, clock_period_limit: f32, clock_period_increment: i32, nb_rounds: i32, name: Option<&str>, starts_at: Option<i32>, round_interval: Option<i32>, variant: Option<crate::models::VariantKey>, position: Option<&str>, description: Option<&str>, rated: Option<bool>, password: Option<&str>, forbidden_pairings: Option<&str>, manual_pairings: Option<&str>, chat_for: Option<f32>, conditions_period_min_rating_period_rating: Option<i32>, conditions_period_max_rating_period_rating: Option<i32>, conditions_period_nb_rated_game_period_nb: Option<i32>, conditions_period_play_your_games: Option<bool>, conditions_period_allow_list: Option<&str>) -> Result<serde_json::Value, Error<ApiSwissNewError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/new/{teamId}", local_var_configuration.base_path, teamId=crate::apis::urlencode(team_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = name {
        local_var_form_params.insert("name", local_var_param_value.to_string());
    }
    local_var_form_params.insert("clock.limit", clock_period_limit.to_string());
    local_var_form_params.insert("clock.increment", clock_period_increment.to_string());
    local_var_form_params.insert("nbRounds", nb_rounds.to_string());
    if let Some(local_var_param_value) = starts_at {
        local_var_form_params.insert("startsAt", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = round_interval {
        local_var_form_params.insert("roundInterval", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = variant {
        local_var_form_params.insert("variant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = position {
        local_var_form_params.insert("position", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = description {
        local_var_form_params.insert("description", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = rated {
        local_var_form_params.insert("rated", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_form_params.insert("password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = forbidden_pairings {
        local_var_form_params.insert("forbiddenPairings", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = manual_pairings {
        local_var_form_params.insert("manualPairings", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = chat_for {
        local_var_form_params.insert("chatFor", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_min_rating_period_rating {
        local_var_form_params.insert("conditions.minRating.rating", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_max_rating_period_rating {
        local_var_form_params.insert("conditions.maxRating.rating", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_nb_rated_game_period_nb {
        local_var_form_params.insert("conditions.nbRatedGame.nb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_play_your_games {
        local_var_form_params.insert("conditions.playYourGames", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_allow_list {
        local_var_form_params.insert("conditions.allowList", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSwissNewError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Manually schedule the next round date and time of a Swiss tournament.  This sets the `roundInterval` field to `99999999`, i.e. manual scheduling.  All further rounds will need to be manually scheduled, unless the `roundInterval` field is changed back to automatic scheduling. 
pub async fn api_swiss_schedule_next_round(configuration: &configuration::Configuration, id: &str, date: Option<i32>) -> Result<(), Error<ApiSwissScheduleNextRoundError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/schedule-next-round", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = date {
        local_var_form_params.insert("date", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ApiSwissScheduleNextRoundError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Terminate a Swiss tournament 
pub async fn api_swiss_terminate(configuration: &configuration::Configuration, id: &str) -> Result<crate::models::Ok, Error<ApiSwissTerminateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/terminate", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSwissTerminateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update a Swiss tournament.  Be mindful not to make important changes to ongoing tournaments.  Additional restrictions:   - clock.limit + clock.increment > 0   - 15s and 0+1 variant tournaments cannot be rated 
pub async fn api_swiss_update(configuration: &configuration::Configuration, id: &str, clock_period_limit: f32, clock_period_increment: i32, nb_rounds: i32, name: Option<&str>, starts_at: Option<i32>, round_interval: Option<i32>, variant: Option<crate::models::VariantKey>, description: Option<&str>, rated: Option<bool>, password: Option<&str>, forbidden_pairings: Option<&str>, manual_pairings: Option<&str>, chat_for: Option<f32>, conditions_period_min_rating_period_rating: Option<i32>, conditions_period_max_rating_period_rating: Option<i32>, conditions_period_nb_rated_game_period_nb: Option<i32>, conditions_period_play_your_games: Option<bool>, conditions_period_allow_list: Option<&str>) -> Result<serde_json::Value, Error<ApiSwissUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/edit", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = name {
        local_var_form_params.insert("name", local_var_param_value.to_string());
    }
    local_var_form_params.insert("clock.limit", clock_period_limit.to_string());
    local_var_form_params.insert("clock.increment", clock_period_increment.to_string());
    local_var_form_params.insert("nbRounds", nb_rounds.to_string());
    if let Some(local_var_param_value) = starts_at {
        local_var_form_params.insert("startsAt", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = round_interval {
        local_var_form_params.insert("roundInterval", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = variant {
        local_var_form_params.insert("variant", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = description {
        local_var_form_params.insert("description", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = rated {
        local_var_form_params.insert("rated", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_form_params.insert("password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = forbidden_pairings {
        local_var_form_params.insert("forbiddenPairings", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = manual_pairings {
        local_var_form_params.insert("manualPairings", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = chat_for {
        local_var_form_params.insert("chatFor", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_min_rating_period_rating {
        local_var_form_params.insert("conditions.minRating.rating", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_max_rating_period_rating {
        local_var_form_params.insert("conditions.maxRating.rating", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_nb_rated_game_period_nb {
        local_var_form_params.insert("conditions.nbRatedGame.nb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_play_your_games {
        local_var_form_params.insert("conditions.playYourGames", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = conditions_period_allow_list {
        local_var_form_params.insert("conditions.allowList", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSwissUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament. It's possible to join again later. Points are preserved. 
pub async fn api_swiss_withdraw(configuration: &configuration::Configuration, id: &str) -> Result<crate::models::Ok, Error<ApiSwissWithdrawError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/withdraw", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSwissWithdrawError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all swiss tournaments of a team.  Tournaments are sorted by reverse chronological order of start date (last starting first).  Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON). 
pub async fn api_team_swiss(configuration: &configuration::Configuration, team_id: &str, max: Option<i32>) -> Result<serde_json::Value, Error<ApiTeamSwissError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/team/{teamId}/swiss", local_var_configuration.base_path, teamId=crate::apis::urlencode(team_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max {
        local_var_req_builder = local_var_req_builder.query(&[("max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiTeamSwissError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.  Games are sorted by reverse chronological order (last round first).  The game stream is throttled, depending on who is making the request:   - Anonymous request: 20 games per second   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second 
pub async fn games_by_swiss(configuration: &configuration::Configuration, id: &str, player: Option<&str>, moves: Option<bool>, pgn_in_json: Option<bool>, tags: Option<bool>, clocks: Option<bool>, evals: Option<bool>, accuracy: Option<bool>, opening: Option<bool>) -> Result<serde_json::Value, Error<GamesBySwissError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/games", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = player {
        local_var_req_builder = local_var_req_builder.query(&[("player", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moves {
        local_var_req_builder = local_var_req_builder.query(&[("moves", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pgn_in_json {
        local_var_req_builder = local_var_req_builder.query(&[("pgnInJson", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tags {
        local_var_req_builder = local_var_req_builder.query(&[("tags", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = clocks {
        local_var_req_builder = local_var_req_builder.query(&[("clocks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = evals {
        local_var_req_builder = local_var_req_builder.query(&[("evals", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = accuracy {
        local_var_req_builder = local_var_req_builder.query(&[("accuracy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = opening {
        local_var_req_builder = local_var_req_builder.query(&[("opening", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GamesBySwissError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Players of a swiss tournament, with their score and performance, sorted by rank (best first).  Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).  If called on an ongoing tournament, results can be inconsistent due to ranking changes while the players are being streamed. Use on finished tournaments for guaranteed consistency. 
pub async fn results_by_swiss(configuration: &configuration::Configuration, id: &str, nb: Option<i32>) -> Result<serde_json::Value, Error<ResultsBySwissError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}/results", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = nb {
        local_var_req_builder = local_var_req_builder.query(&[("nb", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ResultsBySwissError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get detailed info about a Swiss tournament. 
pub async fn swiss(configuration: &configuration::Configuration, id: &str) -> Result<serde_json::Value, Error<SwissError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/swiss/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SwissError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Download a tournament in the Tournament Report File format, the FIDE standard.  Documentation: <https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf>  Example: <https://lichess.org/swiss/j8rtJ5GL.trf> 
pub async fn swiss_trf(configuration: &configuration::Configuration, id: &str) -> Result<String, Error<SwissTrfError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/swiss/{id}.trf", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SwissTrfError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

