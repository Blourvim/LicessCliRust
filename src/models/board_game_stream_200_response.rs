/*
 * Lichess.org API reference
 *
 * # Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login and gameplay: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - API UI app with OAuth2 login and endpoint forms: [source](https://github.com/lichess-org/api-ui) / [website](https://lichess.org/api/ui) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles) - [Download all evaluated positions](https://database.lichess.org/#evals)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/lichess-org/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/lichess-bot-devs/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot) - [JavaScript & TypeScript general API](https://github.com/devjiwonchoi/equine)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.  ## Authentication ### Which authentication method is right for me? [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md)  ### Personal Access Token Personal API access tokens allow you to quickly interact with Lichess API without going through an OAuth flow. - [Generate a personal access token](https://lichess.org/account/oauth/token) - `curl https://lichess.org/api/account -H \"Authorization: Bearer {token}\"` - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)  ### Authorization Code Flow with PKCE The authorization code flow with PKCE allows your users to **login with Lichess**. Lichess supports unregistered and public clients (no client authentication, choose any unique client id). The only accepted code challenge method is `S256`. Access tokens are long-lived (expect one year), unless they are revoked. Refresh tokens are not supported.  See the [documentation for the OAuth endpoints](#tag/OAuth) or the [PKCE RFC](https://datatracker.ietf.org/doc/html/rfc7636#section-4) for a precise protocol description.  - [Demo app](https://lichess-org.github.io/api-demo/) - [Minimal client-side example](https://github.com/lichess-org/api/tree/master/example/oauth-app) - [Flask/Python example](https://github.com/lakinwecker/lichess-oauth-flask) - [Java example](https://github.com/tors42/lichess-oauth-pkce-app) - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)  #### Real life examples - [PyChess](https://github.com/gbtami/pychess-variants) ([source code](https://github.com/gbtami/pychess-variants)) - [Lichess4545](https://www.lichess4545.com/) ([source code](https://github.com/cyanfish/heltour)) - [English Chess Federation](https://ecf.octoknight.com/) - [Rotherham Online Chess](https://rotherhamonlinechess.azurewebsites.net/tournaments)  ### Token format Access tokens and authorization codes match `^[A-Za-z0-9_]+$`. The length of tokens can be increased without notice. Make sure your application can handle at least 512 characters. By convention tokens have a recognizable prefix, but do not rely on this.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@lichess.org
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardGameStream200Response {
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    #[serde(rename = "variant")]
    pub variant: Box<crate::models::Variant>,
    #[serde(rename = "clock")]
    pub clock: Box<crate::models::Clock>,
    #[serde(rename = "speed")]
    pub speed: crate::models::Speed,
    #[serde(rename = "perf")]
    pub perf: Box<crate::models::GameFullEventPerf>,
    #[serde(rename = "rated", deserialize_with = "Option::deserialize")]
    pub rated: Option<serde_json::Value>,
    #[serde(rename = "createdAt", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    #[serde(rename = "white")]
    pub white: Box<crate::models::GameEventPlayer>,
    #[serde(rename = "black")]
    pub black: Box<crate::models::GameEventPlayer>,
    #[serde(rename = "initialFen", deserialize_with = "Option::deserialize")]
    pub initial_fen: Option<serde_json::Value>,
    #[serde(rename = "state")]
    pub state: Box<crate::models::GameStateEvent>,
    #[serde(
        rename = "tournamentId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tournament_id: Option<Option<serde_json::Value>>,
    /// Current moves in UCI format
    #[serde(rename = "moves", deserialize_with = "Option::deserialize")]
    pub moves: Option<serde_json::Value>,
    /// Integer of milliseconds White has left on the clock
    #[serde(rename = "wtime", deserialize_with = "Option::deserialize")]
    pub wtime: Option<serde_json::Value>,
    /// Integer of milliseconds Black has left on the clock
    #[serde(rename = "btime", deserialize_with = "Option::deserialize")]
    pub btime: Option<serde_json::Value>,
    /// Integer of White Fisher increment.
    #[serde(rename = "winc", deserialize_with = "Option::deserialize")]
    pub winc: Option<serde_json::Value>,
    /// Integer of Black Fisher increment.
    #[serde(rename = "binc", deserialize_with = "Option::deserialize")]
    pub binc: Option<serde_json::Value>,
    #[serde(rename = "status")]
    pub status: crate::models::GameStatus,
    /// Color of the winner, if any
    #[serde(
        rename = "winner",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub winner: Option<Option<serde_json::Value>>,
    /// true if white is offering draw, else omitted
    #[serde(
        rename = "wdraw",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub wdraw: Option<Option<serde_json::Value>>,
    /// true if black is offering draw, else omitted
    #[serde(
        rename = "bdraw",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub bdraw: Option<Option<serde_json::Value>>,
    /// true if white is proposing takeback, else omitted
    #[serde(
        rename = "wtakeback",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub wtakeback: Option<Option<serde_json::Value>>,
    /// true if black is proposing takeback, else omitted
    #[serde(
        rename = "btakeback",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub btakeback: Option<Option<serde_json::Value>>,
    #[serde(rename = "room", deserialize_with = "Option::deserialize")]
    pub room: Option<Room>,
    #[serde(rename = "username", deserialize_with = "Option::deserialize")]
    pub username: Option<serde_json::Value>,
    #[serde(rename = "text", deserialize_with = "Option::deserialize")]
    pub text: Option<serde_json::Value>,
    #[serde(rename = "gone", deserialize_with = "Option::deserialize")]
    pub gone: Option<serde_json::Value>,
    #[serde(
        rename = "claimWinInSeconds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub claim_win_in_seconds: Option<Option<serde_json::Value>>,
}

impl BoardGameStream200Response {
    pub fn new(
        r#type: Option<serde_json::Value>,
        id: Option<serde_json::Value>,
        variant: crate::models::Variant,
        clock: crate::models::Clock,
        speed: crate::models::Speed,
        perf: crate::models::GameFullEventPerf,
        rated: Option<serde_json::Value>,
        created_at: Option<serde_json::Value>,
        white: crate::models::GameEventPlayer,
        black: crate::models::GameEventPlayer,
        initial_fen: Option<serde_json::Value>,
        state: crate::models::GameStateEvent,
        moves: Option<serde_json::Value>,
        wtime: Option<serde_json::Value>,
        btime: Option<serde_json::Value>,
        winc: Option<serde_json::Value>,
        binc: Option<serde_json::Value>,
        status: crate::models::GameStatus,
        room: Option<Room>,
        username: Option<serde_json::Value>,
        text: Option<serde_json::Value>,
        gone: Option<serde_json::Value>,
    ) -> BoardGameStream200Response {
        BoardGameStream200Response {
            r#type,
            id,
            variant: Box::new(variant),
            clock: Box::new(clock),
            speed,
            perf: Box::new(perf),
            rated,
            created_at,
            white: Box::new(white),
            black: Box::new(black),
            initial_fen,
            state: Box::new(state),
            tournament_id: None,
            moves,
            wtime,
            btime,
            winc,
            binc,
            status,
            winner: None,
            wdraw: None,
            bdraw: None,
            wtakeback: None,
            btakeback: None,
            room,
            username,
            text,
            gone,
            claim_win_in_seconds: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Room {
    #[serde(rename = "player")]
    Player,
    #[serde(rename = "spectator")]
    Spectator,
}

impl Default for Room {
    fn default() -> Room {
        Self::Player
    }
}
