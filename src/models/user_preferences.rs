/*
 * Lichess.org API reference
 *
 * # Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login and gameplay: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - API UI app with OAuth2 login and endpoint forms: [source](https://github.com/lichess-org/api-ui) / [website](https://lichess.org/api/ui) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles) - [Download all evaluated positions](https://database.lichess.org/#evals)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/lichess-org/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/lichess-bot-devs/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot) - [JavaScript & TypeScript general API](https://github.com/devjiwonchoi/equine)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.  ## Authentication ### Which authentication method is right for me? [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md)  ### Personal Access Token Personal API access tokens allow you to quickly interact with Lichess API without going through an OAuth flow. - [Generate a personal access token](https://lichess.org/account/oauth/token) - `curl https://lichess.org/api/account -H \"Authorization: Bearer {token}\"` - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)  ### Authorization Code Flow with PKCE The authorization code flow with PKCE allows your users to **login with Lichess**. Lichess supports unregistered and public clients (no client authentication, choose any unique client id). The only accepted code challenge method is `S256`. Access tokens are long-lived (expect one year), unless they are revoked. Refresh tokens are not supported.  See the [documentation for the OAuth endpoints](#tag/OAuth) or the [PKCE RFC](https://datatracker.ietf.org/doc/html/rfc7636#section-4) for a precise protocol description.  - [Demo app](https://lichess-org.github.io/api-demo/) - [Minimal client-side example](https://github.com/lichess-org/api/tree/master/example/oauth-app) - [Flask/Python example](https://github.com/lakinwecker/lichess-oauth-flask) - [Java example](https://github.com/tors42/lichess-oauth-pkce-app) - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)  #### Real life examples - [PyChess](https://github.com/gbtami/pychess-variants) ([source code](https://github.com/gbtami/pychess-variants)) - [Lichess4545](https://www.lichess4545.com/) ([source code](https://github.com/cyanfish/heltour)) - [English Chess Federation](https://ecf.octoknight.com/) - [Rotherham Online Chess](https://rotherhamonlinechess.azurewebsites.net/tournaments)  ### Token format Access tokens and authorization codes match `^[A-Za-z0-9_]+$`. The length of tokens can be increased without notice. Make sure your application can handle at least 512 characters. By convention tokens have a recognizable prefix, but do not rely on this. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@lichess.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserPreferences {
    #[serde(rename = "dark", skip_serializing_if = "Option::is_none")]
    pub dark: Option<bool>,
    #[serde(rename = "transp", skip_serializing_if = "Option::is_none")]
    pub transp: Option<bool>,
    #[serde(rename = "bgImg", skip_serializing_if = "Option::is_none")]
    pub bg_img: Option<String>,
    #[serde(rename = "is3d", skip_serializing_if = "Option::is_none")]
    pub is3d: Option<bool>,
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<Theme>,
    #[serde(rename = "pieceSet", skip_serializing_if = "Option::is_none")]
    pub piece_set: Option<PieceSet>,
    #[serde(rename = "theme3d", skip_serializing_if = "Option::is_none")]
    pub theme3d: Option<Theme3d>,
    #[serde(rename = "pieceSet3d", skip_serializing_if = "Option::is_none")]
    pub piece_set3d: Option<PieceSet3d>,
    #[serde(rename = "soundSet", skip_serializing_if = "Option::is_none")]
    pub sound_set: Option<SoundSet>,
    #[serde(rename = "blindfold", skip_serializing_if = "Option::is_none")]
    pub blindfold: Option<i32>,
    #[serde(rename = "autoQueen", skip_serializing_if = "Option::is_none")]
    pub auto_queen: Option<i32>,
    #[serde(rename = "autoThreefold", skip_serializing_if = "Option::is_none")]
    pub auto_threefold: Option<i32>,
    #[serde(rename = "takeback", skip_serializing_if = "Option::is_none")]
    pub takeback: Option<i32>,
    #[serde(rename = "moretime", skip_serializing_if = "Option::is_none")]
    pub moretime: Option<i32>,
    #[serde(rename = "clockTenths", skip_serializing_if = "Option::is_none")]
    pub clock_tenths: Option<i32>,
    #[serde(rename = "clockBar", skip_serializing_if = "Option::is_none")]
    pub clock_bar: Option<bool>,
    #[serde(rename = "clockSound", skip_serializing_if = "Option::is_none")]
    pub clock_sound: Option<bool>,
    #[serde(rename = "premove", skip_serializing_if = "Option::is_none")]
    pub premove: Option<bool>,
    #[serde(rename = "animation", skip_serializing_if = "Option::is_none")]
    pub animation: Option<i32>,
    #[serde(rename = "captured", skip_serializing_if = "Option::is_none")]
    pub captured: Option<bool>,
    #[serde(rename = "follow", skip_serializing_if = "Option::is_none")]
    pub follow: Option<bool>,
    #[serde(rename = "highlight", skip_serializing_if = "Option::is_none")]
    pub highlight: Option<bool>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<bool>,
    #[serde(rename = "coords", skip_serializing_if = "Option::is_none")]
    pub coords: Option<i32>,
    #[serde(rename = "replay", skip_serializing_if = "Option::is_none")]
    pub replay: Option<i32>,
    #[serde(rename = "challenge", skip_serializing_if = "Option::is_none")]
    pub challenge: Option<i32>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<i32>,
    #[serde(rename = "coordColor", skip_serializing_if = "Option::is_none")]
    pub coord_color: Option<i32>,
    #[serde(rename = "submitMove", skip_serializing_if = "Option::is_none")]
    pub submit_move: Option<i32>,
    #[serde(rename = "confirmResign", skip_serializing_if = "Option::is_none")]
    pub confirm_resign: Option<i32>,
    #[serde(rename = "insightShare", skip_serializing_if = "Option::is_none")]
    pub insight_share: Option<i32>,
    #[serde(rename = "keyboardMove", skip_serializing_if = "Option::is_none")]
    pub keyboard_move: Option<i32>,
    #[serde(rename = "zen", skip_serializing_if = "Option::is_none")]
    pub zen: Option<i32>,
    #[serde(rename = "moveEvent", skip_serializing_if = "Option::is_none")]
    pub move_event: Option<i32>,
    #[serde(rename = "rookCastle", skip_serializing_if = "Option::is_none")]
    pub rook_castle: Option<i32>,
}

impl UserPreferences {
    pub fn new() -> UserPreferences {
        UserPreferences {
            dark: None,
            transp: None,
            bg_img: None,
            is3d: None,
            theme: None,
            piece_set: None,
            theme3d: None,
            piece_set3d: None,
            sound_set: None,
            blindfold: None,
            auto_queen: None,
            auto_threefold: None,
            takeback: None,
            moretime: None,
            clock_tenths: None,
            clock_bar: None,
            clock_sound: None,
            premove: None,
            animation: None,
            captured: None,
            follow: None,
            highlight: None,
            destination: None,
            coords: None,
            replay: None,
            challenge: None,
            message: None,
            coord_color: None,
            submit_move: None,
            confirm_resign: None,
            insight_share: None,
            keyboard_move: None,
            zen: None,
            move_event: None,
            rook_castle: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Theme {
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "blue2")]
    Blue2,
    #[serde(rename = "blue3")]
    Blue3,
    #[serde(rename = "blue-marble")]
    BlueMarble,
    #[serde(rename = "canvas")]
    Canvas,
    #[serde(rename = "wood")]
    Wood,
    #[serde(rename = "wood2")]
    Wood2,
    #[serde(rename = "wood3")]
    Wood3,
    #[serde(rename = "wood4")]
    Wood4,
    #[serde(rename = "maple")]
    Maple,
    #[serde(rename = "maple2")]
    Maple2,
    #[serde(rename = "brown")]
    Brown,
    #[serde(rename = "leather")]
    Leather,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "marble")]
    Marble,
    #[serde(rename = "green-plastic")]
    GreenPlastic,
    #[serde(rename = "grey")]
    Grey,
    #[serde(rename = "metal")]
    Metal,
    #[serde(rename = "olive")]
    Olive,
    #[serde(rename = "newspaper")]
    Newspaper,
    #[serde(rename = "purple")]
    Purple,
    #[serde(rename = "purple-diag")]
    PurpleDiag,
    #[serde(rename = "pink")]
    Pink,
    #[serde(rename = "ic")]
    Ic,
}

impl Default for Theme {
    fn default() -> Theme {
        Self::Blue
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PieceSet {
    #[serde(rename = "cburnett")]
    Cburnett,
    #[serde(rename = "merida")]
    Merida,
    #[serde(rename = "alpha")]
    Alpha,
    #[serde(rename = "pirouetti")]
    Pirouetti,
    #[serde(rename = "chessnut")]
    Chessnut,
    #[serde(rename = "chess7")]
    Chess7,
    #[serde(rename = "reillycraig")]
    Reillycraig,
    #[serde(rename = "companion")]
    Companion,
    #[serde(rename = "riohacha")]
    Riohacha,
    #[serde(rename = "kosal")]
    Kosal,
    #[serde(rename = "leipzig")]
    Leipzig,
    #[serde(rename = "fantasy")]
    Fantasy,
    #[serde(rename = "spatial")]
    Spatial,
    #[serde(rename = "california")]
    California,
    #[serde(rename = "pixel")]
    Pixel,
    #[serde(rename = "maestro")]
    Maestro,
    #[serde(rename = "fresca")]
    Fresca,
    #[serde(rename = "cardinal")]
    Cardinal,
    #[serde(rename = "gioco")]
    Gioco,
    #[serde(rename = "tatiana")]
    Tatiana,
    #[serde(rename = "staunty")]
    Staunty,
    #[serde(rename = "governor")]
    Governor,
    #[serde(rename = "dubrovny")]
    Dubrovny,
    #[serde(rename = "icpieces")]
    Icpieces,
    #[serde(rename = "shapes")]
    Shapes,
    #[serde(rename = "letter")]
    Letter,
}

impl Default for PieceSet {
    fn default() -> PieceSet {
        Self::Cburnett
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Theme3d {
    #[serde(rename = "Black-White-Aluminium")]
    BlackWhiteAluminium,
    #[serde(rename = "Brushed-Aluminium")]
    BrushedAluminium,
    #[serde(rename = "China-Blue")]
    ChinaBlue,
    #[serde(rename = "China-Green")]
    ChinaGreen,
    #[serde(rename = "China-Grey")]
    ChinaGrey,
    #[serde(rename = "China-Scarlet")]
    ChinaScarlet,
    #[serde(rename = "Classic-Blue")]
    ClassicBlue,
    #[serde(rename = "Gold-Silver")]
    GoldSilver,
    #[serde(rename = "Light-Wood")]
    LightWood,
    #[serde(rename = "Power-Coated")]
    PowerCoated,
    #[serde(rename = "Rosewood")]
    Rosewood,
    #[serde(rename = "Marble")]
    Marble,
    #[serde(rename = "Wax")]
    Wax,
    #[serde(rename = "Jade")]
    Jade,
    #[serde(rename = "Woodi")]
    Woodi,
}

impl Default for Theme3d {
    fn default() -> Theme3d {
        Self::BlackWhiteAluminium
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PieceSet3d {
    #[serde(rename = "Basic")]
    Basic,
    #[serde(rename = "Wood")]
    Wood,
    #[serde(rename = "Metal")]
    Metal,
    #[serde(rename = "RedVBlue")]
    RedVBlue,
    #[serde(rename = "ModernJade")]
    ModernJade,
    #[serde(rename = "ModernWood")]
    ModernWood,
    #[serde(rename = "Glass")]
    Glass,
    #[serde(rename = "Trimmed")]
    Trimmed,
    #[serde(rename = "Experimental")]
    Experimental,
    #[serde(rename = "Staunton")]
    Staunton,
    #[serde(rename = "CubesAndPi")]
    CubesAndPi,
}

impl Default for PieceSet3d {
    fn default() -> PieceSet3d {
        Self::Basic
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SoundSet {
    #[serde(rename = "silent")]
    Silent,
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "piano")]
    Piano,
    #[serde(rename = "nes")]
    Nes,
    #[serde(rename = "sfx")]
    Sfx,
    #[serde(rename = "futuristic")]
    Futuristic,
    #[serde(rename = "robot")]
    Robot,
    #[serde(rename = "music")]
    Music,
    #[serde(rename = "speech")]
    Speech,
}

impl Default for SoundSet {
    fn default() -> SoundSet {
        Self::Silent
    }
}

